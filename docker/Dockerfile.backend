# 使用Python 3.12作为基础镜像
FROM python:3.12-slim

# 设置工作目录
WORKDIR /app

# 安装系统依赖和Chrome
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    unzip \
    default-jdk \
    libpq-dev \
    build-essential \
    xvfb \
    procps \
    curl \
    postgresql-client \
    fonts-ipafont-gothic \
    fonts-wqy-zenhei \
    fonts-thai-tlwg \
    fonts-kacst \
    fonts-freefont-ttf \
    --no-install-recommends \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable --no-install-recommends \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 下载并安装ChromeDriver - 使用固定版本避免API问题
RUN CHROME_VERSION=$(google-chrome --version | grep -oP '(?<=Google Chrome )[0-9]+') \
    && echo "检测到Chrome主版本: $CHROME_VERSION" \
    && if [ "$CHROME_VERSION" -ge "131" ]; then \
        CHROMEDRIVER_VERSION="131.0.6778.85"; \
    elif [ "$CHROME_VERSION" -ge "130" ]; then \
        CHROMEDRIVER_VERSION="130.0.6723.116"; \
    elif [ "$CHROME_VERSION" -ge "129" ]; then \
        CHROMEDRIVER_VERSION="129.0.6668.89"; \
    else \
        CHROMEDRIVER_VERSION="128.0.6613.137"; \
    fi \
    && echo "使用ChromeDriver版本: $CHROMEDRIVER_VERSION" \
    && wget -q "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip" \
    && unzip chromedriver-linux64.zip \
    && mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
    && chmod +x /usr/local/bin/chromedriver \
    && rm -rf chromedriver-linux64.zip chromedriver-linux64 \
    && echo "ChromeDriver安装完成，版本信息:" \
    && chromedriver --version

# 复制整个项目目录到镜像中
COPY . .

RUN rm -rf docker

RUN rm -rf frontend

RUN pip install --no-cache-dir -r requirements.txt

# 设置环境变量
ENV PYTHONPATH=/app
ENV DISPLAY=:99

# 设置启动脚本
COPY docker/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# 启动服务
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"] 