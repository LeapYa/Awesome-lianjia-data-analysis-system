services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14
    container_name: lianjia-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123456}
      POSTGRES_DB: rental_analysis
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: lianjia-backend
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./verification_sessions:/app/verification_sessions
      - ./verification_cookies:/app/verification_cookies
      - ./captcha_data:/app/captcha_data
      - ./static:/app/static
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_NAME=rental_analysis
      - PYTHONUNBUFFERED=1
      - CHROME_HEADLESS=true
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-secure_jwt_secret_key_2024}
      - EMAIL_ENCRYPTION_KEY=${EMAIL_ENCRYPTION_KEY:-dev_email_encryption_key_change_in_prod}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.163.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_EMAIL=${SMTP_EMAIL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-localhost}
    restart: unless-stopped
    networks:
      - app-network

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: lianjia-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-localhost}
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 